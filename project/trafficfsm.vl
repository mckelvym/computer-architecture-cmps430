// Class    : CMPS 430
// Section  : 001
// Problem  : Verilog Project
// Name     : McKelvy, James Markus
// Name     : Zhang, William
// CLID     : jmm0468
// CLID     : wxz1067

// The name of the file containing this code is trafficfsm.vl

// for lights, 
// 00 is red
// 01 is yellow
// 10 is green

// this takes a command to switch and outputs the state
// of the machine and the state of each light
module newtrafficfsm(switch, state, ew_light, ns_light);

// the signal to switch to a new state
input switch;
// the binary code for the state of this light
output [1:0] ew_light;
// the binary code for the state of this light
output [1:0] ns_light;
// the binary code for the state of this machine
output [2:0] state;
// a register so we can store new states of this light
reg [1:0] ew_light;
// a register so we can store new states of this light
reg [1:0] ns_light;
// a register so we can store new states of this machine
reg [2:0] state = 3'b000;

// temporary registers for the lights
reg [1:0] tempew;
reg [1:0] tempns;

// these are the various states of the machine
parameter state0= 3'b000;
parameter state1= 3'b001;
parameter state2= 3'b010;
parameter state3= 3'b011;
parameter state4= 3'b100;
parameter state5= 3'b101;

// anytime the switch signal changes, this code is evaluated
always @(posedge switch or negedge switch)
begin: next_state_switcher
	// changes to the next state, or cycles over if at the last state
	// also changes the lights to be what they are supposed to.
	case(state)
		state0: begin
			assign state = state1;
			tempew <= 2'b10;
			tempns <= 2'b00;
			end
		state1: begin
			assign state = state2;
			tempew <= 2'b01;
			tempns <= 2'b00;
			end
		state2: begin
			assign state = state3;
			tempew <= 2'b00;
			tempns <= 2'b00;
			end
		state3: begin
			assign state = state4;
			tempew <= 2'b00;
			tempns <= 2'b10;
			end
		state4: begin
			assign state = state5;
			tempew <= 2'b00;
			tempns <= 2'b01;
			end
		state5: begin
			assign state = state0;
			tempew <= 2'b00;
			tempns <= 2'b00;
			end
		default: begin
			assign state= state0;
			tempew <= 2'b00;
			tempns <= 2'b00;
			end
	endcase
	// assign the real variables the values they need to be from the temp variables
	assign ew_light = tempew;
	assign ns_light = tempns;
end

endmodule
